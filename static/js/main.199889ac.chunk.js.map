{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","ButtonType","goodsFromServer","App","useState","isReversed","setReversed","NONE","sortType","setSortType","newGoods","goods","visibleGoods","sort","first","second","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","setResetButton","onButtonClick","button","REVERSE","RESET","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,EAMAC,E,0EAnBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGF,O,eAAAA,I,uBAAAA,I,oBAAAA,M,cAMAC,O,uBAAAA,I,mBAAAA,I,qBAAAA,I,kBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASJ,EAASO,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAxBD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENO,EAAY,YAAOD,GAazB,OAXAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQP,GACN,KAAKR,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAOI,OAC/B,QACE,OAAO,MAINd,EAAaO,EAAaQ,UAAYR,EAO5BS,CAAkBnB,EACjC,CAAEM,WAAUH,eAERiB,EAAiBd,IAAaR,EAASgB,UACxCR,IAAaR,EAASkB,QAAUb,EAE/BkB,EAAgB,SAACC,GACrB,OAAQA,GACN,KAAKvB,EAAWe,SACd,OAAOP,EAAYT,EAASgB,UAC9B,KAAKf,EAAWiB,OACd,OAAOT,EAAYT,EAASkB,QAE9B,KAAKjB,EAAWwB,QACd,OAAOnB,GAAaD,GACtB,KAAKJ,EAAWyB,MAEd,OAAQpB,GAAY,GACpBG,EAAYT,EAASO,MAEvB,QACE,OAAO,IAIb,OACE,sBAAKoB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYrB,IAAaR,EAASgB,WAEpCc,QAAS,kBAAMP,EAActB,EAAWe,WAL1C,iCAUA,wBACEY,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYrB,IAAaR,EAASkB,SAEpCY,QAAS,kBAAMP,EAActB,EAAWiB,SAL1C,4BASA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAaxB,IAEjByB,QAAS,kBAAMP,EAActB,EAAWwB,UAP1C,qBAWCH,GAEG,wBACEM,KAAK,SACLD,UAAWE,IAAW,SAAU,YAAa,CAC3C,YAAaxB,IAEfyB,QAAS,kBAAMP,EAActB,EAAWyB,QAL1C,sBAWN,6BACGhB,EAASqB,KAAI,SAAAC,GAAI,OAChB,6BAAgBA,GAAPA,YCnInBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.199889ac.chunk.js","sourcesContent":["/* eslint-disable consistent-return */\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nenum ButtonType {\n  ALPHABET,\n  LENGTH,\n  REVERSE,\n  RESET,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((first, second) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return first.localeCompare(second);\n      case SortType.LENGTH:\n        return first.length - second.length;\n      default:\n        return 0;\n    }\n  });\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const newGoods = getReorderedGoods(goodsFromServer,\n    { sortType, isReversed });\n\n  const setResetButton = sortType === SortType.ALPHABET\n    || sortType === SortType.LENGTH || isReversed;\n\n  const onButtonClick = (button: ButtonType) => {\n    switch (button) {\n      case ButtonType.ALPHABET:\n        return setSortType(SortType.ALPHABET);\n      case ButtonType.LENGTH:\n        return setSortType(SortType.LENGTH);\n\n      case ButtonType.REVERSE:\n        return setReversed(!isReversed);\n      case ButtonType.RESET:\n\n        return (setReversed(false),\n        setSortType(SortType.NONE)\n        );\n      default:\n        return 0;\n    }\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={() => onButtonClick(ButtonType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => onButtonClick(ButtonType.LENGTH)}\n        >\n          Sort by length\n        </button>\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => onButtonClick(ButtonType.REVERSE)}\n        >\n          Reverse\n        </button>\n        {setResetButton\n          && (\n            <button\n              type=\"button\"\n              className={classNames('button', 'is-danger', {\n                'is-light': !isReversed,\n              })}\n              onClick={() => onButtonClick(ButtonType.RESET)}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n      <ul>\n        {newGoods.map(good => (\n          <li key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}